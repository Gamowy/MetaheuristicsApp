@page "/reports"
@using MetaheuristicsPlatform.Schemas
@using System.Text.RegularExpressions
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Metaheurystyki - raporty</PageTitle>

<h1>Raporty z testów</h1>
<p class="lead">Raporty z przeprowadzonych testów</p>

<p class="text-center fs-3 ">Raporty txt</p>
@if (response != null)
{
	if(txtReports != null)
	{
		<div class="mb-3">
			<Grid TItem="ReportAndDate"
			Class="table table-hover table-bordered table-striped"
			DataProvider="TxtReportsProvider"
			AllowSorting="true"
			AllowPaging="true"
			PageSize="10"
			Responsive="true">

				<GridColumns>
					<GridColumn TItem="ReportAndDate" HeaderText="Lp." IsDefaultSortColumn="true" SortDirection="SortDirection.Descending"
								SortKeySelector="item => item.Lp">
						@context.Lp
					</GridColumn>
					<GridColumn TItem="ReportAndDate" HeaderText="Data utworzenia" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending" 
					SortKeySelector="item => item.Date">
						@context.Date.ToShortDateString()
					</GridColumn>
					<GridColumn TItem="ReportAndDate" HeaderText="Plik z raportem (.txt)" Sortable="false">
						<a href="@context.Href" target="_blank" download="@context.Report">@context.Report</a>
					</GridColumn>
				</GridColumns>
			</Grid>
		</div>
	}
	else
	{
		<p class="mb-3 text-center fs-5">Brak raportów pdf</p>
	}
	<p class="text-center fs-3 ">Raporty pdf</p>
	@if (pdfReports != null) {
		<div class="mb-3">
			<Grid TItem="ReportAndDate"
			Class="table table-hover table-bordered table-striped"
			DataProvider="PdfReportsProvider"
			AllowSorting="true"
			AllowPaging="true"
			PageSize="10"
			Responsive="true">

				<GridColumns>
					<GridColumn TItem="ReportAndDate" HeaderText="Lp." IsDefaultSortColumn="true" SortDirection="SortDirection.Descending"
								SortKeySelector="item => item.Lp">
						@context.Lp
					</GridColumn>
					<GridColumn TItem="ReportAndDate" HeaderText="Data utworzenia" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending"
					SortKeySelector="item => item.Date">
						@context.Date.ToShortDateString()
					</GridColumn>
					<GridColumn TItem="ReportAndDate" HeaderText="Plik z raportem (.pdf)" Sortable="false">
						<a href="@context.Href" target="_blank" download="@context.Report">@context.Report</a>
					</GridColumn>
				</GridColumns>
			</Grid>
		</div>
	}
	else {
		<p class="mb-3 text-center fs-5">Brak raportów pdf</p>
	}
}
else {
	<p class="mb-3 text-center fs-4">Nie znaleziono żadnych raportów</p>
}

@code 
{
	private struct ReportAndDate {
		public int Lp;
		public string Report;
		public DateTime Date;
		public string Href;
	}
	private Regex dateRegex = new Regex(@"\d{4}\-\d{2}\-\d{2}");

	private ReportPaths? response;
	private ReportAndDate[]? txtReports;
	private ReportAndDate[]? pdfReports;

	protected override async Task OnInitializedAsync() 
	{
		// Get txt reports download paths
		try 
		{
			response = await Http.GetFromJsonAsync<ReportPaths>("reports/paths");
			if (response != null) 
			{
				if (response.TxtPaths.Length > 0) {
					txtReports = new ReportAndDate[response.TxtPaths.Length];
					for (int i = 0; i < response.TxtPaths.Length; i++) 
					{
						Match match = dateRegex.Match(response.TxtPaths[i]);
						if (match.Success)
						{
							txtReports[i] = new ReportAndDate()
								{
									Lp = i+1,
									Report = response.TxtPaths[i],
									Date = DateTime.Parse(match.Value),
									Href = $"{Http.BaseAddress!}data/txtReports/{response.TxtPaths[i]}"
								};

						}
					}
				}
				if (response.PdfPaths.Length > 0)
				{
					pdfReports = new ReportAndDate[response.PdfPaths.Length];
					for (int i = 0; i < response.PdfPaths.Length; i++)
					{
						Match match = dateRegex.Match(response.PdfPaths[i]);
						if (match.Success)
						{
							pdfReports[i] = new ReportAndDate()
								{
									Lp = i+1,
									Report = response.PdfPaths[i],
									Date = DateTime.Parse(match.Value),
									Href = $"{Http.BaseAddress!}data/pdfReports/{response.PdfPaths[i]}"
								};
						}
					}
				}
			}
		}
		catch (HttpRequestException e) 
		{
			response = null;
			txtReports = null;
			pdfReports = null;
			Console.WriteLine("Failed to fetch reports: " + e.Message);
		}
	}

	private async Task<GridDataProviderResult<ReportAndDate>> TxtReportsProvider(GridDataProviderRequest<ReportAndDate> request)
	{
		if (txtReports != null)
		{
			return await Task.FromResult(request.ApplyTo(txtReports));
		}
		else 
		{
			return await Task.FromResult(request.ApplyTo(Array.Empty<ReportAndDate>()));
		}
	}

	private async Task<GridDataProviderResult<ReportAndDate>> PdfReportsProvider(GridDataProviderRequest<ReportAndDate> request)
	{
		if (pdfReports != null)
		{
			return await Task.FromResult(request.ApplyTo(pdfReports));
		}
		else
		{
			return await Task.FromResult(request.ApplyTo(Array.Empty<ReportAndDate>()));
		}
;
	}
}